@page "/"

@attribute [Authorize]

@rendermode InteractiveServer

@inject ITicketService ticketService

<PageTitle>Home</PageTitle>
<SectionContent SectionName="page-title">Dashboard</SectionContent>

<style>
    .dashboard-status {
        border: 1px solid #eaeaea;
        text-decoration: none;
        color: var(--black);
        border-radius: 5px;
    }

        .dashboard-status .header {
            padding: 12px;
            border-bottom: 1px solid #eaeaea;
        }

        .dashboard-status .body {
            padding: 12px;
        }

    .summary {
        border: 1px solid #eaeaea;
        padding: 20px;
        text-decoration: none;
        color: var(--black);
        border-radius: 5px;
        cursor: pointer;
    }

        .summary .counter {
            font-size: 1.5rem;
            font-weight: 400;
        }

        .summary:hover {
            color: var(--dark-green);
            border: 1px solid var(--dark-green);
            transition: border-color 0.5s ease;
            transition: color 0.5s ease;
        }
</style>

<div class="container mt-3">
    <div class="row">
        <div class="col">
            <a href="/ticket?filterStatus=NEW">
                <div class="summary">
                    <div class="title">New</div>
                    <div class="counter">@NewCount</div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="/ticket?filterStatus=OPEN">
                <div class="summary">
                    <div class="title">Open</div>
                    <div class="counter">@OpenCount</div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="/ticket?filterStatus=CLOSED">
                <div class="summary">
                    <div class="title">Closed</div>
                    <div class="counter">@ClosedCount</div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="/ticket">
                <div class="summary">
                    <div class="title">Total</div>
                    <div class="counter">@TotalCount</div>
                </div>
            </a>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-9">
            <div class="dashboard-status">
                <div class="header">
                    <div class="title">Last 12 Months Tickets</div>
                </div>
                <div class="body">
                    <MudChart ChartType="ChartType.Line"
                                ChartSeries="@last12MonthsSeries"
                                ChartOptions="@last12MonthsOptions"
                                XAxisLabels="@last12MonthsLabel"
                                Width="100%">   
                    </MudChart>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-status">
                <div class="header">
                    <div class="title">
                        <Select @ref="categoryTypeDdl" 
                            elements="categoryTypes"
                            Clearable="false"
                            OnSelectChangedParent="HandleCategoryChartChange">
                        </Select>
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div class="body">
                    <MudChart ChartType="ChartType.Pie" 
                            InputData="@chartByCategoryValue" 
                            InputLabels="@chartByCategoryLabel">
                    </MudChart>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ChartResponse> last12MonthsTickets;
    private List<ChartSeries> last12MonthsSeries = new List<ChartSeries>();
    private ChartOptions last12MonthsOptions = new ChartOptions();
    private string[] last12MonthsLabel;

    private List<ChartResponse> chartByCategory;
    Select categoryTypeDdl;
    private List<SelectItemDTO> categoryTypes;
    double[] chartByCategoryValue = {};
    string[] chartByCategoryLabel = {};

    private List<ChartResponse> summary;
    private bool summaryInitialized;
    private int NewCount, OpenCount, ClosedCount, TotalCount;

    protected override void OnInitialized()
    {
        last12MonthsTickets = ticketService.Last12MonthsTickets();

        last12MonthsSeries.Add(new ChartSeries
        {
            Name = "Last 12 Months Ticket",
            Data = last12MonthsTickets.Select(x => (double)x.Value).ToArray()
        });

        last12MonthsOptions.YAxisTicks = 5;
        last12MonthsLabel = last12MonthsTickets.Select(x => x.Label).ToArray();

        categoryTypes = new List<SelectItemDTO>
        {
            new SelectItemDTO{ Value = "Category", Text ="Category" },
            new SelectItemDTO{ Value = "Product", Text ="Product" },
            new SelectItemDTO{ Value = "Priority", Text ="Priority" }
        };

        chartByCategory = ticketService.ChartByCategory("Category");
        chartByCategoryValue = chartByCategory.Select(x => (double)x.Value).ToArray();
        chartByCategoryLabel = chartByCategory.Select(x => x.Label).ToArray();

        summary = ticketService.GetSummary();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (categoryTypeDdl.selectedValue == null) categoryTypeDdl.selectedValue = "Category";

        if (!summaryInitialized)
        {
            NewCount = summary.FirstOrDefault(x => x.Label == Constants.STATUS_NEW).Value;
            OpenCount = summary.FirstOrDefault(x => x.Label == Constants.STATUS_OPEN).Value;
            ClosedCount = summary.FirstOrDefault(x => x.Label == Constants.STATUS_CLOSED).Value;
            TotalCount = summary.Sum(x => x.Value);
        }

        StateHasChanged();
    }

    private void HandleCategoryChartChange(string value)
    {
        chartByCategory = ticketService.ChartByCategory(value);
        chartByCategoryValue = chartByCategory.Select(x => (double)x.Value).ToArray();
        chartByCategoryLabel = chartByCategory.Select(x => x.Label).ToArray();
    }
}
