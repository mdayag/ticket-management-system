@page "/changepassword"

@attribute [Authorize]

@inject IAccountService accountService
@inject ProtectedSessionStorage protectedSessionStorage

@rendermode InteractiveServer

<SectionContent SectionName="page-title">Change Password</SectionContent>

<MudGrid Class="mt-5" Justify="Justify.Center" AlignItems="AlignItems.Center">
    <MudCard Width="500px">
        <MudCardContent>
            <Alert @ref="alert" />
            @if (errors.Length > 0)
            {
                <MudItem>
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">@($"Error found ({errors.Length})")</MudText>
                        @foreach (var error in errors)
                        {
                            <MudText Color="@Color.Error">@error</MudText>
                        }
                    </MudPaper>
                </MudItem>
            }

            <MudTextField T="string" 
                          Label="Current Password" @ref="currPassword"
                          InputType="InputType.Password" />

            <MudTextField Class="mt-5" T="string" 
                          Label="New Password" @ref="newPassword"
                          InputType="InputType.Password" />

            <MudTextField Class="mt-5" T="string"
                          Label="Confirm New Password" 
                          InputType="InputType.Password" 
                          @ref="confirmNewPassword" />

            <MudButton Class="mt-5" 
                          Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          OnClick="OnChangePassword">
                          Change Password
            </MudButton>
        </MudCardContent>
    </MudCard>
</MudGrid>

@code {
    Alert alert;

    string[] errors = { };
    MudTextField<string> currPassword;
    MudTextField<string> newPassword;
    MudTextField<string> confirmNewPassword;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isAccountConfirmed = await protectedSessionStorage.GetAsync<bool>("accountconfirmed");

            if (!isAccountConfirmed.Value)
            {
                alert.ShowFailed("Please change your password upon your first login for security purposes.");
            }
        }
    }

    private async Task OnChangePassword()
    {
        if(newPassword.Text != confirmNewPassword.Text)
        {
            alert.ShowFailed("Password don't match!");

            return;
        }

        var request = new ChangePasswordRequest
        {
            CurrentPassword = currPassword.Text,
            NewPassword = newPassword.Text,
            ConfirmNewPassword = confirmNewPassword.Text
        };

        ValidationHelpers validationHelper = new ValidationHelpers(request);
        bool isValid = validationHelper.Validate();
        errors = validationHelper.validationResults.Select(x => x.ErrorMessage).ToArray();

        if (isValid)
        {
            var result = await accountService.ChangePassword(request);

            if (result.IsSuccess)
            {
                alert.ShowSuccess("Password has been successfully changed!");
                await protectedSessionStorage.DeleteAsync("accountconfirmed");
            }
            else
            {
                alert.ShowFailed(result.ErrorMessage);
            }
        }
    }
}