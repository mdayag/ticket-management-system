@page "/login"
@layout EmptyLayout

@inject IAccountService accountService
@inject NavigationManager nav
@inject EncryptionHelper<LoginDTO> encrypt
@inject ProtectedSessionStorage protectedSessionStorage
@inject SignInManager<User> signInManager;

@rendermode InteractiveServer

<section class="vh-100">
	<div class="container-fluid h-custom">
		<div class="row d-flex justify-content-center align-items-center h-100">
			<div class="col-md-9 col-lg-6 col-xl-5">
				<img src="/assets/imgs/login-img.jpg" class="img-fluid" alt="Sample image" />
			</div>
			<div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
				<div class="d-flex flex-row align-items-center justify-content-center justify-content-lg-start">
					<p class="lead fw-normal mb-0 me-3">Sign in with Email</p>
				</div>
				<Alert @ref="alert"/>
				<EditForm Model="Input" method="post" OnValidSubmit="OnLogin" FormName="Login">
					<DataAnnotationsValidator />
					<hr />
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.Email" class="form-control" aria-required="true" />
						<label for="email" class="form-label">Email</label>
						<ValidationMessage For="() => Input.Email" class="text-danger" />
					</div>
					<div class="form-floating mb-3">
						<InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" />
						<label for="password" class="form-label">Password</label>
						<ValidationMessage For="() => Input.Password" class="text-danger" />
					</div>
					<div class="form-floating mb-3">
						<InputCheckbox @bind-Value="Input.Remember" />
						Remember me
					</div>
					<div>
						<button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</section>

@code {
	private Alert alert;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	// protected override async Task OnInitializedAsync()
	// {
	// 	await accountService.RegisterUser(new Domain.DTO.Request.RegisterUserRequest
	// 	{
	// 		Email = "mdayag4891@gmail.com",
	// 		Role = "Admin"
	// 	});
	// }

	private async Task OnLogin()
	{
		var verify = await accountService.VerifyUser(Input.Email, Input.Password);

		if (!verify.IsSuccess)
		{
			alert.ShowFailed(verify.ErrorMessage);
			return;
		}

		var loginData = new LoginDTO
		{
			Username = verify.Value,
			Password = Input.Password,
			RememberMe = Input.Remember
		};

		var user = await signInManager.UserManager.FindByEmailAsync(verify.Value);
		await protectedSessionStorage.SetAsync("avatar", user.Avatar);
		await protectedSessionStorage.SetAsync("email", user.Email);
		await protectedSessionStorage.SetAsync("accountconfirmed", user.AccountConfirmed);

		var payload = encrypt.Encode(loginData);

		nav.NavigateTo($"/processor/{payload}");
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		public string Email { get; set; } = string.Empty;

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; } = string.Empty;

		public bool Remember { get; set; }
	}
}