// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241106115719_Seed1")]
    partial class Seed1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("ServerFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("TicketId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Application Bug"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Network Issue"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "User Issue"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiscussionId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("Domain.Entities.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"));

                    b.Property<int>("ExpectedDays")
                        .HasColumnType("int");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            PriorityId = 1,
                            ExpectedDays = 5,
                            PriorityName = "Low"
                        },
                        new
                        {
                            PriorityId = 2,
                            ExpectedDays = 3,
                            PriorityName = "Medium"
                        },
                        new
                        {
                            PriorityId = 3,
                            ExpectedDays = 1,
                            PriorityName = "High"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductName = "Product 1"
                        },
                        new
                        {
                            ProductId = 2,
                            ProductName = "Product 2"
                        },
                        new
                        {
                            ProductId = 3,
                            ProductName = "Product 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("AssignedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RaisedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RaisedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RaisedBy");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CategoryId = 1,
                            Description = "Descriptio for ticket 1",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8721),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8703),
                            Status = "NEW",
                            Summary = "Sample ticket 1"
                        },
                        new
                        {
                            TicketId = 2,
                            CategoryId = 2,
                            Description = "Descriptio for ticket 2",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8735),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8734),
                            Status = "OPEN",
                            Summary = "Sample ticket 2"
                        },
                        new
                        {
                            TicketId = 3,
                            CategoryId = 3,
                            Description = "Descriptio for ticket 3",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8740),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8739),
                            Status = "CLOSED",
                            Summary = "Sample ticket 3"
                        },
                        new
                        {
                            TicketId = 4,
                            CategoryId = 1,
                            Description = "Descriptio for ticket 1",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8746),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8744),
                            Status = "NEW",
                            Summary = "Sample ticket 1"
                        },
                        new
                        {
                            TicketId = 5,
                            CategoryId = 2,
                            Description = "Descriptio for ticket 2",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8751),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8750),
                            Status = "OPEN",
                            Summary = "Sample ticket 2"
                        },
                        new
                        {
                            TicketId = 6,
                            CategoryId = 3,
                            Description = "Descriptio for ticket 3",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8756),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8755),
                            Status = "CLOSED",
                            Summary = "Sample ticket 3"
                        },
                        new
                        {
                            TicketId = 7,
                            CategoryId = 1,
                            Description = "Descriptio for ticket 1",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8761),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8760),
                            Status = "NEW",
                            Summary = "Sample ticket 1"
                        },
                        new
                        {
                            TicketId = 8,
                            CategoryId = 2,
                            Description = "Descriptio for ticket 2",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8766),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8764),
                            Status = "OPEN",
                            Summary = "Sample ticket 2"
                        },
                        new
                        {
                            TicketId = 9,
                            CategoryId = 3,
                            Description = "Descriptio for ticket 3",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8771),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8770),
                            Status = "CLOSED",
                            Summary = "Sample ticket 3"
                        },
                        new
                        {
                            TicketId = 10,
                            CategoryId = 1,
                            Description = "Descriptio for ticket 1",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8776),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8775),
                            Status = "NEW",
                            Summary = "Sample ticket 1"
                        },
                        new
                        {
                            TicketId = 11,
                            CategoryId = 2,
                            Description = "Descriptio for ticket 2",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8781),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8780),
                            Status = "OPEN",
                            Summary = "Sample ticket 2"
                        },
                        new
                        {
                            TicketId = 12,
                            CategoryId = 3,
                            Description = "Descriptio for ticket 3",
                            ExpectedDate = new DateTime(2024, 11, 7, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8787),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            RaisedDate = new DateTime(2024, 11, 6, 19, 57, 17, 854, DateTimeKind.Local).AddTicks(8786),
                            Status = "CLOSED",
                            Summary = "Sample ticket 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AccountConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "540feda6-7ba4-4dee-9533-d92fb3829539",
                            AccessFailedCount = 0,
                            AccountConfirmed = false,
                            ConcurrencyStamp = "0bc36a61-8521-43dc-9c37-60159e083835",
                            Email = "mdayag4891@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MDAYAG4891@GMAIL.COM",
                            NormalizedUserName = "MDAYAG4891@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPH+RqdaKAEqcr42AM9O4g02JHvMmYzYopp0NojonKHCDKrG57WR1EQxHICJdUYvKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c831d81d-7fa9-4144-b4a9-244acf392767",
                            TwoFactorEnabled = false,
                            UserName = "mdayag4891@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Domain.Entities.Discussion", "Discussion")
                        .WithMany("Attachments")
                        .HasForeignKey("DiscussionId");

                    b.HasOne("Domain.Entities.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId");

                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.HasOne("Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("RaisedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AssignedTo");

                    b.Navigation("Category");

                    b.Navigation("Priority");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
